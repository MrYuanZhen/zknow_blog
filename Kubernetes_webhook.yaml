apiVersion: v1
data:
  zhen_blog.json: |-
    [
        {
            "id": "zhen_blog",
            "execute-command": "/webhooks.sh",
            "command-working-directory": "/home",
            "response-message": "I got the payload!",
            "include-command-output-in-response": true,
            "include-command-output-in-response-on-error": true,
            "trigger-rule-mismatch-http-response-code": 500,
            "response-headers":
            [
                {
                    "name": "Access-Control-Allow-Origin",
                    "value": "*"
                }
            ],
            "pass-arguments-to-command":
            [
                {
                    "source": "entire-payload"
                }
              ],
            "pass-environment-to-command":
            [
                {
                    "envname": "APP_NS",
                    "source": "url",
                    "name": "ns"
                },
                {
                    "envname": "APP_WORKLOAD",
                    "source": "url",
                    "name": "workload"
                },
                {
                    "envname": "APP_CONTAINER",
                    "source": "url",
                    "name": "container"
                },
                {
                    "envname": "REPO_TYPE",
                    "source": "url",
                    "name": "repo_type"
                },
                {
                    "envname": "NET_TYPE",
                    "source": "url",
                    "name": "net_type"
                },
                {
                    "envname": "MAIL_TO",
                    "source": "string",
                    "name": "<MAIL_TO>"
                }
            ],
            "trigger-rule":
            {
                "and":
                [
                    {
                        "match":
                        {
                            "type": "value",
                            "value": "5oiR54ix5p2O5oGS5Li9",
                            "parameter":
                            {
                                "source": "url",
                                "name": "token"
                            }
                        }
                    },
                    {
                        "match":
                        {
                            "type": "value",
                            "value": "blog",
                            "parameter":
                            {
                                "source": "url",
                                "name": "ns"
                            }
                        }
                    },
                    {
                        "match":
                        {
                            "type": "value",
                            "value": "deployment/zhen-blog",
                            "parameter":
                            {
                                "source": "url",
                                "name": "workload"
                            }
                        }
                    },
                    {
                        "match":
                        {
                            "type": "value",
                            "value": "zhen-blog",
                            "parameter":
                            {
                                "source": "url",
                                "name": "container"
                            }
                        }
                    }
                ]
            }
        }
    ]
kind: ConfigMap
metadata:
  name: zhen-blog-webhook
  namespace: blog

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: webhookserviceaccount
  namespace: blog

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: webhook
  namespace: blog
subjects:
- kind: ServiceAccount
  name: webhookserviceaccount
  namespace: blog
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: blog
  name: blog-webhook
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: blog-webhook
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: blog-webhook
    spec:
      containers:
      - env:
        - name: WEBHOOK_CMD
          value: -template
        image: registry.cn-shenzhen.aliyuncs.com/rancher/webhook
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 2
          successThreshold: 1
          tcpSocket:
            port: 9000
          timeoutSeconds: 2
        name: blog-webhook
        ports:
        - containerPort: 9000
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 2
          successThreshold: 2
          tcpSocket:
            port: 9000
          timeoutSeconds: 2
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /etc/webhook/source
          name: vol1
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: webhookserviceaccount
      serviceAccountName: webhookserviceaccount
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 256
          name: zhen-blog-webhook
          optional: false
        name: vol1

---

apiVersion: v1
kind: Service
metadata:
  name: webhook-svc
  namespace: blog
spec:
  selector:
      app: blog-webhook
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: 9000
      nodePort: 30001
  type: NodePort
